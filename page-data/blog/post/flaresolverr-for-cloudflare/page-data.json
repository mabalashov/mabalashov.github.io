{"componentChunkName":"component---src-templates-post-template-js","path":"/blog/post/flaresolverr-for-cloudflare","result":{"data":{"markdownRemark":{"id":"10b8a58c-4885-5522-845d-81a2efce0d96","html":"<h4 id=\"необходимо-спарсить-содержимое-сайта-однако-сайт-защищен-от-парсинга-cloudflare-в-данном-примере-речь-идёт-о-сайте-hltv-у-которого-отсутсвует-api-однако-есть-неофициальный-npm-пакет-gigobytehltv-который-стягивает-данные-с-сайта-парсингом-html-страниц\" style=\"position:relative;\"><a href=\"#%D0%BD%D0%B5%D0%BE%D0%B1%D1%85%D0%BE%D0%B4%D0%B8%D0%BC%D0%BE-%D1%81%D0%BF%D0%B0%D1%80%D1%81%D0%B8%D1%82%D1%8C-%D1%81%D0%BE%D0%B4%D0%B5%D1%80%D0%B6%D0%B8%D0%BC%D0%BE%D0%B5-%D1%81%D0%B0%D0%B9%D1%82%D0%B0-%D0%BE%D0%B4%D0%BD%D0%B0%D0%BA%D0%BE-%D1%81%D0%B0%D0%B9%D1%82-%D0%B7%D0%B0%D1%89%D0%B8%D1%89%D0%B5%D0%BD-%D0%BE%D1%82-%D0%BF%D0%B0%D1%80%D1%81%D0%B8%D0%BD%D0%B3%D0%B0-cloudflare-%D0%B2-%D0%B4%D0%B0%D0%BD%D0%BD%D0%BE%D0%BC-%D0%BF%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D0%B5-%D1%80%D0%B5%D1%87%D1%8C-%D0%B8%D0%B4%D1%91%D1%82-%D0%BE-%D1%81%D0%B0%D0%B9%D1%82%D0%B5-hltv-%D1%83-%D0%BA%D0%BE%D1%82%D0%BE%D1%80%D0%BE%D0%B3%D0%BE-%D0%BE%D1%82%D1%81%D1%83%D1%82%D1%81%D0%B2%D1%83%D0%B5%D1%82-api-%D0%BE%D0%B4%D0%BD%D0%B0%D0%BA%D0%BE-%D0%B5%D1%81%D1%82%D1%8C-%D0%BD%D0%B5%D0%BE%D1%84%D0%B8%D1%86%D0%B8%D0%B0%D0%BB%D1%8C%D0%BD%D1%8B%D0%B9-npm-%D0%BF%D0%B0%D0%BA%D0%B5%D1%82-gigobytehltv-%D0%BA%D0%BE%D1%82%D0%BE%D1%80%D1%8B%D0%B9-%D1%81%D1%82%D1%8F%D0%B3%D0%B8%D0%B2%D0%B0%D0%B5%D1%82-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D0%B5-%D1%81-%D1%81%D0%B0%D0%B9%D1%82%D0%B0-%D0%BF%D0%B0%D1%80%D1%81%D0%B8%D0%BD%D0%B3%D0%BE%D0%BC-html-%D1%81%D1%82%D1%80%D0%B0%D0%BD%D0%B8%D1%86\" aria-label=\"необходимо спарсить содержимое сайта однако сайт защищен от парсинга cloudflare в данном примере речь идёт о сайте hltv у которого отсутсвует api однако есть неофициальный npm пакет gigobytehltv который стягивает данные с сайта парсингом html страниц permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Необходимо спарсить содержимое сайта, однако сайт защищен от парсинга Cloudflare. В данном примере речь идёт о сайте HLTV, у которого отсутсвует API, однако есть неофициальный npm пакет <a href=\"https://github.com/gigobyte/HLTV\">gigobyte/HLTV</a>, который стягивает данные с сайта парсингом html страниц.</h4>\n<hr>\n<p><img src=\"/media/2022-04-10-flaresolverr-for-cloudflare/flaresolverr.png\" alt=\"FlareSolverr\" title=\"FlareSolverr\"></p>\n<p>Для обхода Cloudflare существует решение <a href=\"https://github.com/FlareSolverr/FlareSolverr\">FlareSolverr</a>, которое по сути является прокси-сервером и держит под капотом headless firefox завёрнутый в <a href=\"https://github.com/puppeteer/puppeteer\">puppeteer</a></p>\n<p>В итоге, мы разворачиваем FlareSolverr, отправляем ему запрос по http что мы хотим стянуть, он в свою очередь делает запрос при помощи puppeteer и возвращает нам результат</p>\n<p><strong>Развернём FlareSolverr.</strong></p>\n<p>На локальном ПК я использую docker-compose, в нём описание сервиса FlareSolverr будет выглядеть так:</p>\n<pre><code>flaresolverr:\n    container_name: flaresolverr\n    image: flaresolverr/flaresolverr:latest\n    restart: always\n    networks:\n        - internal\n</code></pre>\n<p>Не забываем указать новый сервис в секции depends_on нашего приложения</p>\n<p>FlareSolverr использует порт 8191 по умолчанию, потому чтобы проверить вручную что всё работает корректно, можно еще прокинуть этот порт и поиграться Postman’ом</p>\n<p>Далее, необходимо все запросы перенаправить на FlareSolverr</p>\n<p>Я использую gigobyte/HLTV, в настройках которого есть метод loadPage. Переопределим его, чтобы все наши запросы шли через прокси:</p>\n<pre><code class=\"language-javascript\">const axios = new Axios();\n\nconst client = HLTV.createInstance({\nloadPage: async (url: string): Promise&#x3C;string> => {\n    let lastError = null;\n    \n        for (let attempts = 0; attempts &#x3C; 3; attempts++) {\n          try {\n            const resp = await axios.post(\n              'http://flaresolverr:8191/v1',\n              {\n                cmd: 'request.get',\n                url,\n                maxTimeout: 60000,\n              },\n            );\n    \n            return resp.data;\n          } catch (error) {\n            lastError = error;\n          }\n        }\n    \n        throw lastError;\n    },\n});\n</code></pre>\n<p>Здесь я даю 3 попытки на скачивание и 60 секунд таймаута, потому что, как показывает практика, FlareSolverr срабатывает корректно далеко не в 100% случаев</p>\n<p>Очевидно, чтобы использовать FlareSolverr для других ресурсов, не составит труда настроить ваш любимый js-клиент подобным образом</p>","fields":{"slug":"/posts/flaresolverr-for-cloudflare","tagSlugs":["/tag/cloudflare","/tag/flaresolverr","/tag/puppeteer"],"categorySlug":"/category/recipes"},"frontmatter":{"date":"2022-04-10T21:35:00.000Z","description":"Необходимо спарсить содержимое сайта, однако сайт защищен от парсинга Cloudflare.  В данном примере речь идёт о сайте HLTV, у которого отсутсвует API, однако есть неофициальный npm пакет gigobyte/HLTV,  который стягивает данные с сайта парсингом html страниц.","category":"recipes","tags":["cloudflare","flaresolverr","puppeteer"],"title":"Обходим защиту Cloudflare при помощи FlareSolverr на примере HLTV"}}},"pageContext":{"slug":"/posts/flaresolverr-for-cloudflare","allCategories":[{"fieldValue":"debug","totalCount":2,"categoryColor":"pink-600"},{"fieldValue":"development","totalCount":3,"categoryColor":"green-600"},{"fieldValue":"recipes","totalCount":9,"categoryColor":"indigo-600"}]}},"staticQueryHashes":["2052939023","251939775","401334301"]}