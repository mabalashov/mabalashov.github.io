{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/flaresolverr-in-lambda","result":{"data":{"markdownRemark":{"id":"0807eef9-ef6a-5635-a3a1-3b6637f93a2b","html":"<h4 id=\"необходимо-развернуть-flaresolverr-в-aws-lambda-lambda-была-выбрана-потому-что-берет-на-себя-все-проблемы-связанные-с-масштабированием-и-идеально-подходит-для-разворачивания-небольших-сервисов-у-которых-может-быть-большая-нагрузка\" style=\"position:relative;\"><a href=\"#%D0%BD%D0%B5%D0%BE%D0%B1%D1%85%D0%BE%D0%B4%D0%B8%D0%BC%D0%BE-%D1%80%D0%B0%D0%B7%D0%B2%D0%B5%D1%80%D0%BD%D1%83%D1%82%D1%8C-flaresolverr-%D0%B2-aws-lambda-lambda-%D0%B1%D1%8B%D0%BB%D0%B0-%D0%B2%D1%8B%D0%B1%D1%80%D0%B0%D0%BD%D0%B0-%D0%BF%D0%BE%D1%82%D0%BE%D0%BC%D1%83-%D1%87%D1%82%D0%BE-%D0%B1%D0%B5%D1%80%D0%B5%D1%82-%D0%BD%D0%B0-%D1%81%D0%B5%D0%B1%D1%8F-%D0%B2%D1%81%D0%B5-%D0%BF%D1%80%D0%BE%D0%B1%D0%BB%D0%B5%D0%BC%D1%8B-%D1%81%D0%B2%D1%8F%D0%B7%D0%B0%D0%BD%D0%BD%D1%8B%D0%B5-%D1%81-%D0%BC%D0%B0%D1%81%D1%88%D1%82%D0%B0%D0%B1%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%D0%BC-%D0%B8-%D0%B8%D0%B4%D0%B5%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE-%D0%BF%D0%BE%D0%B4%D1%85%D0%BE%D0%B4%D0%B8%D1%82-%D0%B4%D0%BB%D1%8F-%D1%80%D0%B0%D0%B7%D0%B2%D0%BE%D1%80%D0%B0%D1%87%D0%B8%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-%D0%BD%D0%B5%D0%B1%D0%BE%D0%BB%D1%8C%D1%88%D0%B8%D1%85-%D1%81%D0%B5%D1%80%D0%B2%D0%B8%D1%81%D0%BE%D0%B2-%D1%83-%D0%BA%D0%BE%D1%82%D0%BE%D1%80%D1%8B%D1%85-%D0%BC%D0%BE%D0%B6%D0%B5%D1%82-%D0%B1%D1%8B%D1%82%D1%8C-%D0%B1%D0%BE%D0%BB%D1%8C%D1%88%D0%B0%D1%8F-%D0%BD%D0%B0%D0%B3%D1%80%D1%83%D0%B7%D0%BA%D0%B0\" aria-label=\"необходимо развернуть flaresolverr в aws lambda lambda была выбрана потому что берет на себя все проблемы связанные с масштабированием и идеально подходит для разворачивания небольших сервисов у которых может быть большая нагрузка permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Необходимо развернуть FlareSolverr в AWS Lambda. Lambda была выбрана потому что берет на себя все проблемы связанные с масштабированием. И идеально подходит для разворачивания небольших сервисов, у которых может быть большая нагрузка</h4>\n<hr>\n<p><img src=\"/media/2022-04-25-flaresolverr-in-lambda/lambda.jpeg\" alt=\"Lambda\" title=\"Lambda\"></p>\n<p><em>Конечный репозиторий с рабочим кодом можно найти <a href=\"https://github.com/mabalashov/FlareSolverr\">здесь</a></em></p>\n<p>Поскольку FlareSolverr выполнен ввиде express-сервера, принесем <a href=\"https://github.com/vendia/serverless-express\">@vendia/serverless-express</a>,\nкоторый позволяет для любого express-приложения создать обёртку для вызова из Lambda.\nДля этого нужно создать отдельный файл <a href=\"https://github.com/mabalashov/FlareSolverr/blob/master/src/handler.ts\">handle.ts</a> который будет обрабатывать входящие запросы</p>\n<p>Далее, настроим <a href=\"https://www.serverless.com/\">serverless</a> поскольку это является самым простым и быстрым способом\nописать IaC и выполнять развёртывание стека в одну команду. Для этого необходимо добавить файл\n<a href=\"https://github.com/mabalashov/FlareSolverr/blob/master/serverless.yml\">serverless.yml</a> в корне проекта</p>\n<p>Необходимо также поправить <a href=\"https://github.com/mabalashov/FlareSolverr/blob/master/Dockerfile\">Dockerfile</a>.\nЛучше всего конечный образ наследовать от <code>amazon/aws-lambda-nodejs:12</code>.\nОн создан на основе <a href=\"https://aws.amazon.com/ru/amazon-linux-2/\">Amazon Linux 2</a>, который в свою очередь основан на RHEL.\nПоэтому используя его, можно пользоваться командой yum</p>\n<p>При желании можно использовать в Lambda любой другой образ, но это будет\n<a href=\"https://docs.aws.amazon.com/lambda/latest/dg/images-create.html\">немного сложнее</a>, хотя в сети есть\n<a href=\"https://blog.carlosnunez.me/post/scraping-chromium-lambda-nodeless-zerostress/\">интересные примеры</a></p>\n<p>Теперь мы готовы к деплою. Однако, не всё так просто. В среде выполнения Lambda есть некоторые ограничения</p>\n<h3 id=\"проблемы\" style=\"position:relative;\"><a href=\"#%D0%BF%D1%80%D0%BE%D0%B1%D0%BB%D0%B5%D0%BC%D1%8B\" aria-label=\"проблемы permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Проблемы</h3>\n<p>Для проверки локально опишем <a href=\"https://github.com/mabalashov/FlareSolverr/blob/master/docker-compose.yml\">docker-compose.yml</a> файл и убедимся, что всё работает</p>\n<p>Однако, запустив в AWS Lambda сейчас мы увидим ошибку:</p>\n<pre><code>ERROR  ERR Error: ENOENT: no such file or directory, access '/home/sbx_user1051'\nat Object.accessSync (fs.js:208:3)\nat testWebBrowserInstallation (/var/task/dist/services/sessions.js:71:8)\n</code></pre>\n<p>Данная ошибка появляется из-за ограничений Lambda: поскольку для работы <a href=\"https://github.com/puppeteer/puppeteer\">pupeeter</a>,\nкоторый лежит в основе FlareSolverr, необходимо иметь права для записи в home директорию текущего пользователя,\nа Lambda по умолчанию это запрещает. Самый простой и быстрый способ решить эту проблему, задать переменную окружения <code>HOME=/tmp</code></p>\n<p>Далее мы столкнемся с попыткой браузера обратиться к общей памяти (/tmp/shm).</p>\n<p>Это <a href=\"https://developers.google.com/web/tools/puppeteer/troubleshooting#running_puppeteer_on_aws_lambda\">известная проблема</a>\nи есть решение для chromium в виде установки флага <code>--disable-dev-shm-usage</code> при запуске браузера</p>\n<p>FlareSolverr использует под капотом <a href=\"https://github.com/FlareSolverr/FlareSolverr/blob/master/src/services/sessions.ts#L149\">захардкоженный Firefox</a>\nи невозможно изменить этот выбор, как и конфигурацию без изменения исходного кода.</p>\n<p>В сети <a href=\"https://github.com/george-lim/firefox-lambda/\">есть попытки</a> запуска Firefox в Lambda, однако после нескольких неуспешных попыток,\nя решил пойти более лёгким путём и изменил исходный код для использования chromium</p>\n<p>Установим chromium в Docker образе:</p>\n<pre><code>RUN yum -y install amazon-linux-extras\nRUN amazon-linux-extras install epel -y\nRUN yum -y install chromium chromedriver\n</code></pre>\n<p>Принесём <a href=\"https://github.com/alixaxel/chrome-aws-lambda\">chrome-aws-lambda</a>:</p>\n<pre><code class=\"language-javascript\">npm i chrome-aws-lambda\n</code></pre>\n<p>И немного <a href=\"https://github.com/mabalashov/FlareSolverr/blob/master/src/services/sessions.ts#L149\">пропатчим</a> код, как написано в документации</p>\n<p>Также стоит <a href=\"https://github.com/alixaxel/chrome-aws-lambda/issues/82#issuecomment-570933340\">увеличить лимиты</a> RAM для нашей функции</p>\n<h3 id=\"проверка\" style=\"position:relative;\"><a href=\"#%D0%BF%D1%80%D0%BE%D0%B2%D0%B5%D1%80%D0%BA%D0%B0\" aria-label=\"проверка permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Проверка</h3>\n<p>Далее всё должно завезтись без проблем. После деплоя функции, мы увидим её эндпоинт в консоли и можно попробовать дёрнуть:</p>\n<pre><code>curl -X POST \\\nhttps://***.execute-api.us-east-1.amazonaws.com/v1 \\\n-H 'cache-control: no-cache' \\\n-H 'content-type: application/json' \\\n-d '{\n\"cmd\": \"request.get\",\n\"url\":\"https://wtfismyip.com/\",\n\"maxTimeout\": 30000\n}'\n</code></pre>","fields":{"slug":"/posts/flaresolverr-in-lambda","tagSlugs":["/tag/flaresolverr","/tag/pupeeter","/tag/devops","/tag/docker","/tag/aws","/tag/lambda","/tag/highload","/tag/serverless"],"categorySlug":"/category/recipes"},"frontmatter":{"date":"2022-04-25T21:35:00.000Z","description":"Необходимо развернуть FlareSolverr в AWS Lambda. Lambda была выбрана потому что берет на себя все проблемы связанные с масштабированием. И идеально подходит для разворачивания небольших сервисов, у которых может быть большая нагрузка","category":"recipes","tags":["flaresolverr","pupeeter","devops","docker","aws","lambda","highload","serverless"],"title":"Запускаем FlareSolverr/pupeeter в AWS Lambda"}}},"pageContext":{"slug":"/posts/flaresolverr-in-lambda","allCategories":[{"fieldValue":"debug","totalCount":2,"categoryColor":"pink-600"},{"fieldValue":"development","totalCount":3,"categoryColor":"green-600"},{"fieldValue":"recipes","totalCount":9,"categoryColor":"indigo-600"}]}},"staticQueryHashes":["2052939023","251939775","401334301"]}