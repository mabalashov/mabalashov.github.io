{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/create-docker-network-for-datadog","result":{"data":{"markdownRemark":{"id":"c8149756-8ee9-59d9-b4a5-0cde8935ce85","html":"<p>Серия статей, основанных на собственном опыте, об особенностях настройки Docker Swarm для работы с Datadog.  </p>\n<hr>\n<p>Недавно попал в руки сервис на PHP + nginx, развёрнутый при помощи Docker Swarm.</p>\n<p>Сервис был на этапе бурной разработки, однако, никаких средств мониторинга настроено не было.</p>\n<p>Первым делом, мной был прикручен Sentry для мониторинга ошибок и следующим шагом я стал прикручивать <a href=\"https://www.datadoghq.com/\">Datadog APM</a>.</p>\n<p>На этом шаге пришлось немного погрузиться в особенности Docker Swarm, об этом и будет эта серия статей</p>\n<p><img src=\"/media/2020-08-22-create-docker-swarm-network-for-datadog/docker-swarm.png\" alt=\"Docker Swarm\" title=\"Docker Swarm\"></p>\n<h1 id=\"создание-сети\" style=\"position:relative;\"><a href=\"#%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-%D1%81%D0%B5%D1%82%D0%B8\" aria-label=\"создание сети permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Создание сети</h1>\n<p>Первым делом необходимо создать docker network, для обеспечения безопасности. Для того, чтобы предоставить внутри нее\nвсе необходимые метрики для datadog-agent, но не отдавать их наружу. </p>\n<h2 id=\"network-docker-compose\" style=\"position:relative;\"><a href=\"#network-docker-compose\" aria-label=\"network docker compose permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Network: Docker Compose</h2>\n<p>Докер рекомендует использовать <a href=\"https://tproger.ru/translations/imperative-declarative-programming-concepts/\">декларативный подход</a>\nвместо императивного и предлагает для этого использовать инструмент Docker Compose, при помощи которого можно описать\nнужные сервисы в файле docker-compose.yaml. Если вы используете Docker Compose, то описание сети будет выглядеть вот так:</p>\n<pre><code>datadog-agent:\n    driver: overlay\n    attachable: true\n    driver_opts:\n      encrypted: \"true\"\n    ipam:\n      config:\n        - subnet: 172.25.0.0/24\n</code></pre>\n<p>В таком случае, при поднятии сервисов, сеть будет создана автоматически</p>\n<p>Здесь мы говорим, что сеть будет работать между несколькими docker-демонами (<code>driver: overlay</code>), к ней можно будет\nвручную подключать контейнеры (<code>attachable: true</code>), будет использовать в docker swarm (<code>scope=swarm</code>), трафик в\nсети зашифрован (<code>encrypted: true</code>) и для удобства указываем диапазон подсети</p>\n<p>Более подробную информацию можно найти в <a href=\"https://docs.docker.com/network/\">официальной документации</a> или в <a href=\"https://linux-notes.org/rabota-s-setju-networking-v-docker/\">отличной\nстатье на русском</a></p>\n<blockquote>\n<p>Стоит обратить внимание, что параметр gateway <a href=\"https://docs.docker.com/compose/compose-file/#ipam\">поддерживается</a>\nтолько в docker-compose версии 2, потому в данном примере опущен.</p>\n</blockquote>\n<h2 id=\"network-docker\" style=\"position:relative;\"><a href=\"#network-docker\" aria-label=\"network docker permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Network: Docker</h2>\n<p>Однако если по какой-то причине необходимо поднять сеть вручную, например, для теста или экономии ресурсов (мало ли), команда будет выглядеть так:</p>\n<pre><code>docker network create \\\n    --driver=overlay \\\n    --attachable \\\n    --scope=swarm \\\n    --opt encrypted \\\n    --subnet=172.25.0.0/24 \\\n    --gateway=172.25.0.10 \\\n    datadog-agent\n</code></pre>\n<p><em>Небольшое отступление:</em></p>\n<p>Зачастую на серверах можно встретить следующую команду в кроне, предназначенную для авто-удаления ненужных контейнеров:</p>\n<pre><code>docker system prune -a --force\n</code></pre>\n<p>Чтобы она не удалила нашу сеть, можно реализовать такой <em>workaround</em> и попросить её не удалять контейнеры, с <code>label=persist</code>:</p>\n<pre><code>docker system prune -a --force --filter \"label!=persist\"\n</code></pre>\n<p>и укажем соответствующий label для нашей сети:</p>\n<pre><code>docker network create \\\n    --driver=overlay \\\n    --attachable \\\n    --scope=swarm \\\n    --opt encrypted \\\n    --subnet=172.25.0.0/24 \\\n    --gateway=172.25.0.10 \\\n    datadog-agent \\\n    --label=persist\n</code></pre>\n<p>Если мы хотим, чтобы сервисы, описанные в docker-compose файле могли использовать созданную сеть, опишем её:</p>\n<pre><code>networks:\n  agent:\n    external:\n      name: datadog-agent\n</code></pre>\n<h2 id=\"использование-сети\" style=\"position:relative;\"><a href=\"#%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D1%81%D0%B5%D1%82%D0%B8\" aria-label=\"использование сети permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Использование сети</h2>\n<p>Укажем в файле docker-compose, чтобы сервис использовал сеть:</p>\n<pre><code>services:\n    some_service:\n        ...\n        network:\n            - datadog-agent\n</code></pre>\n<p>По умолчанию, docker использует для контейнеров\n<a href=\"https://docs.docker.com/engine/tutorials/networkingcontainers/#launch-a-container-on-the-default-network\">служебную сеть bridge</a>,\nесли не указано иное. Потому, если необходимо, стоит также явно указать использование сети по умолчанию: </p>\n<pre><code>services:\n    some_service:\n        ...\n        network:\n            - bridge\n            - datadog-agent\n</code></pre>\n<p>Для поиска проблем может помочь <a href=\"https://docs.docker.com/engine/reference/commandline/inspect/\">команда</a>:</p>\n<pre><code>docker inspect &#x3C;NAME|ID>\n</code></pre>\n<p>которая возвращает полную информацию о любом объекте, созданном докером. В нашем случае, мы можем посмотреть,\nкакие сети использует контейнер или какие контейнеры подключены к определенной сети</p>\n<h2 id=\"резолвинг-внутри-сети\" style=\"position:relative;\"><a href=\"#%D1%80%D0%B5%D0%B7%D0%BE%D0%BB%D0%B2%D0%B8%D0%BD%D0%B3-%D0%B2%D0%BD%D1%83%D1%82%D1%80%D0%B8-%D1%81%D0%B5%D1%82%D0%B8\" aria-label=\"резолвинг внутри сети permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Резолвинг внутри сети</h2>\n<p>Внутри сети сервисы докера резолвятся по <a href=\"https://docs.docker.com/network/overlay/\">имени сервиса</a></p>\n<p>Потому можно обращаться к нужному сервису можно просто <code>http://{service-name}/</code></p>\n<p>Получить список сервисов можно так: </p>\n<pre><code>docker service ls\n</code></pre>\n<p>Имена сервисов могут варьироваться в зависимости от настроек вашей системы. Например, при настройке CI/CD\nдля дев-окружения, в имя сервиса может быть добавлено имя ветки</p>\n<p>Например, при деплое <a href=\"https://docs.docker.com/engine/reference/commandline/stack_deploy/\">стека сервисов в swarm-режиме</a>,\nк имени сервиса будет добавлено имя стека: <code>&#x3C;STACK_NAME>_&#x3C;SERVICE_NAME></code></p>\n<p>Проверим:</p>\n<p><img src=\"/media/2020-08-22-create-docker-swarm-network-for-datadog/docker-swarm-network-check.png\" alt=\"Docker Swarm Network Check\" title=\"Docker Swarm Network Check\"></p>\n<p>Теперь, если мы из одного сервиса обращаемся к другому, будет использована наша только что созданная сеть</p>\n<h1 id=\"интересные-ссылки\" style=\"position:relative;\"><a href=\"#%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D0%B5%D1%81%D0%BD%D1%8B%D0%B5-%D1%81%D1%81%D1%8B%D0%BB%D0%BA%D0%B8\" aria-label=\"интересные ссылки permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ИНТЕРЕСНЫЕ ССЫЛКИ</h1>\n<ul>\n<li><a href=\"https://habr.com/ru/post/334004/\">Сети Docker изнутри: связь между контейнерами в Docker Swarm и Overlay-сети</a></li>\n<li><a href=\"https://linux-notes.org/nastrojka-docker-swarm-klastera-v-unix-linux/\">Настройка docker swarm кластера в Unix/Linux</a></li>\n<li><a href=\"https://dker.ru/docs/docker-engine/learn-by-example/network-containers/\">Сетевые контейнеры</a></li>\n</ul>","fields":{"slug":"/posts/create-docker-network-for-datadog","tagSlugs":["/tag/datadog","/tag/devops","/tag/ubuntu","/tag/php","/tag/datadog","/tag/infrastructure","/tag/docker","/tag/docker swarm"],"categorySlug":"/category/recipes"},"frontmatter":{"date":"2020-08-22T21:35:00.000Z","description":"datadog, devops, ubuntu, php, datadog, infrastructure, docker, docker swarm, ","category":"recipes","tags":["datadog","devops","ubuntu","php","datadog","infrastructure","docker","docker swarm"],"title":"Создаём защищённую сеть в Docker Swarm для внутренних сервисов на примере Datadog"}}},"pageContext":{"slug":"/posts/create-docker-network-for-datadog","allCategories":[{"fieldValue":"development","totalCount":3,"categoryColor":"pink-600"},{"fieldValue":"recipes","totalCount":1,"categoryColor":"green-600"}]}},"staticQueryHashes":["2052939023","251939775","401334301"]}